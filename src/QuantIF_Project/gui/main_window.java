/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package QuantIF_Project.gui;


import QuantIF_Project.patient.exceptions.BadParametersException;
import QuantIF_Project.patient.exceptions.DicomFilesNotFoundException;
import QuantIF_Project.patient.exceptions.NotDirectoryException;
import QuantIF_Project.patient.PatientSerie;
import QuantIF_Project.patient.PatientMultiSeries;
import ij.IJ;
import java.awt.Component;
import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.UnsupportedLookAndFeelException;



/**
 *
 * @author Cyriac
 */
public class main_window extends javax.swing.JFrame {
    
       
    /**
     * PatientSerie en cours d'observation
     */
    private PatientSerie patient;
    
    private PatientMultiSeries superPatient;
    
    /**
     * Creates new form main_window
     */
    public main_window() {
        initComponents();
        this.patient = null;
        this.superPatient = null;
        //On ferme toutes instances de IJ
        IJ.run("Close All");
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        patientChooser = new javax.swing.JFileChooser();
        dynSerieChooser = new javax.swing.JFileChooser();
        statSerieChooser = new javax.swing.JFileChooser();
        desktop = new javax.swing.JDesktopPane();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        patientDescriptTextField = new javax.swing.JTextArea();
        viewerLabel = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        openPatientMenu = new javax.swing.JMenuItem();
        closePatientMenu = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        openMultiAcqMenu = new javax.swing.JMenuItem();
        closeMultiAcqMenu = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        closeAllMenu = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        displayImagesMenu = new javax.swing.JMenuItem();

        patientChooser.setDialogTitle("Selectionnez un dossier patient");
        patientChooser.setFileHidingEnabled(false);
        patientChooser.setFileSelectionMode(javax.swing.JFileChooser.FILES_AND_DIRECTORIES);

        dynSerieChooser.setDialogTitle("Sélectionnez une série d");
        dynSerieChooser.setFileHidingEnabled(false);
        dynSerieChooser.setFileSelectionMode(javax.swing.JFileChooser.FILES_AND_DIRECTORIES);

        statSerieChooser.setDialogTitle("Selectionnez la série statique");
        statSerieChooser.setFileHidingEnabled(false);
        statSerieChooser.setFileSelectionMode(javax.swing.JFileChooser.FILES_AND_DIRECTORIES);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("QuantIF_Project");
        setAutoRequestFocus(false);
        setExtendedState(JFrame.MAXIMIZED_BOTH);

        jButton1.setText("PATLAK");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addContainerGap(61, Short.MAX_VALUE))
        );

        jButton2.setText("HUNTER");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton2)
                .addContainerGap(48, Short.MAX_VALUE))
        );

        jButton3.setText("BARBOLOSI");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton3)
                .addGap(45, 45, 45))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton3)
                .addContainerGap(48, Short.MAX_VALUE))
        );

        jScrollPane1.setFocusable(false);
        jScrollPane1.setOpaque(false);
        jScrollPane1.setRequestFocusEnabled(false);
        jScrollPane1.setVerifyInputWhenFocusTarget(false);

        patientDescriptTextField.setEditable(false);
        patientDescriptTextField.setColumns(20);
        patientDescriptTextField.setFont(new java.awt.Font("Lucida Console", 0, 10)); // NOI18N
        patientDescriptTextField.setLineWrap(true);
        patientDescriptTextField.setRows(5);
        patientDescriptTextField.setText("PAS DE PATIENT EN COURS");
        patientDescriptTextField.setAutoscrolls(false);
        patientDescriptTextField.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        patientDescriptTextField.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane1.setViewportView(patientDescriptTextField);

        javax.swing.GroupLayout desktopLayout = new javax.swing.GroupLayout(desktop);
        desktop.setLayout(desktopLayout);
        desktopLayout.setHorizontalGroup(
            desktopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(desktopLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(desktopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(desktopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1327, Short.MAX_VALUE)
                    .addComponent(viewerLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        desktopLayout.setVerticalGroup(
            desktopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(desktopLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(490, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, desktopLayout.createSequentialGroup()
                .addComponent(viewerLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        desktop.setLayer(jPanel1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        desktop.setLayer(jPanel2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        desktop.setLayer(jPanel3, javax.swing.JLayeredPane.DEFAULT_LAYER);
        desktop.setLayer(jScrollPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        desktop.setLayer(viewerLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jMenu1.setText("Application");
        jMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu1ActionPerformed(evt);
            }
        });

        openPatientMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openPatientMenu.setText("Ouvrir un dossier patient");
        openPatientMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openPatientMenuActionPerformed(evt);
            }
        });
        jMenu1.add(openPatientMenu);

        closePatientMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
        closePatientMenu.setText("Fermer un dossier patient");
        closePatientMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closePatientMenuActionPerformed(evt);
            }
        });
        jMenu1.add(closePatientMenu);
        jMenu1.add(jSeparator2);

        openMultiAcqMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        openMultiAcqMenu.setText("Ouvrir une Multi Acquisition");
        openMultiAcqMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMultiAcqMenuActionPerformed(evt);
            }
        });
        jMenu1.add(openMultiAcqMenu);

        closeMultiAcqMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        closeMultiAcqMenu.setText("Fermer une Multi Acquisition");
        closeMultiAcqMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeMultiAcqMenuActionPerformed(evt);
            }
        });
        jMenu1.add(closeMultiAcqMenu);
        jMenu1.add(jSeparator3);

        closeAllMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        closeAllMenu.setText("Quitter");
        closeAllMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeAllMenuActionPerformed(evt);
            }
        });
        jMenu1.add(closeAllMenu);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Options");

        displayImagesMenu.setText("Afficher Images");
        displayImagesMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayImagesMenuActionPerformed(evt);
            }
        });
        jMenu2.add(displayImagesMenu);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(desktop)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(desktop)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeAllMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeAllMenuActionPerformed
        this.dispose();
    }//GEN-LAST:event_closeAllMenuActionPerformed

    private void jMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu1ActionPerformed
                                  
    }//GEN-LAST:event_jMenu1ActionPerformed

    private void openPatientMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openPatientMenuActionPerformed
        
        
        if (this.patient != null) 
            this.closePatientMenuActionPerformed(evt);
        
        if (this.superPatient != null)
            this.closeMultiAcqMenuActionPerformed(evt);
            
        
        this.patientDescriptTextField.setText("Ouverture du patient en cours...");
        int returnVal = patientChooser.showOpenDialog(this);
        
        if (JFileChooser.APPROVE_OPTION == returnVal) {
            
            File choosenFile;
            choosenFile = patientChooser.getSelectedFile();
           
            // Un fois le dossier choisi
            
            if (choosenFile != null) {
                String patientDirPath;
                if (choosenFile.isDirectory()) {
                    patientDirPath = choosenFile.getAbsolutePath();
                }
                else {
                    patientDirPath = choosenFile.getParent();
                }
                
                
                //On peut créer un nouveau patient
                
               
		try {
			this.patient = new PatientSerie(patientDirPath);
                        JOptionPane.showMessageDialog(null, "Le dossier patient a été ouvert avec succès\n\n"+this.patient.toString(), "Info", JOptionPane.PLAIN_MESSAGE);
                        this.patientDescriptTextField.setText(this.patient.toString());
                        this.displayImagesMenuActionPerformed(evt);
                        
                        
                        System.out.println(this.patient);
		} catch (NotDirectoryException | DicomFilesNotFoundException
                        | BadParametersException e) {
			// TODO Auto-generated catch block
                   
			JOptionPane.showMessageDialog(null, e.getMessage(), "Erreur", JOptionPane.ERROR_MESSAGE);
                        this.patientDescriptTextField.setText("PAS DE PATIENT EN COURS");
                        this.openPatientMenuActionPerformed(evt);
		} 
                
		
                
            }
            else {
                JOptionPane.showMessageDialog(null, "Problem accessing the file!", "Erreur", JOptionPane.ERROR_MESSAGE);
                this.patientDescriptTextField.setText("PAS DE PATIENT EN COURS");
            }
           
        } else {
            System.out.println("File access cancelled by user.");
            this.patientDescriptTextField.setText("PAS DE PATIENT EN COURS");
        }
    }//GEN-LAST:event_openPatientMenuActionPerformed

    private void displayImagesMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayImagesMenuActionPerformed
        
        if (this.patient != null) {
            
            PatientSerieViewer psv = new PatientSerieViewer(this.patient);
            psv.show();
            //Pour rendre la fenêtre immobile
            
            psv.setSize(this.viewerLabel.getSize());
            
            this.viewerLabel.add(psv);
            
            
            
            
        }
        else {
            JOptionPane.showMessageDialog(null, "Aucun patient sélectionné ", "Erreur", JOptionPane.ERROR_MESSAGE);

        }
    }//GEN-LAST:event_displayImagesMenuActionPerformed

    private void closePatientMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closePatientMenuActionPerformed
        Component[] components = viewerLabel.getComponents();
        for (  Component component : components) {
            if (component instanceof PatientSerieViewer) {
                viewerLabel.remove(component);
                viewerLabel.validate();
                viewerLabel.repaint();
            }
        }
        this.patient = null;
        JOptionPane.showMessageDialog(null, "Le patient a été fermé", "Fermeture patient", JOptionPane.INFORMATION_MESSAGE);
        this.patientDescriptTextField.setText("PAS DE PATIENT EN COURS");
    }//GEN-LAST:event_closePatientMenuActionPerformed

    private void openMultiAcqMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMultiAcqMenuActionPerformed
        //On ferme le patient ou la multi acquisition ouvert avant
        if (this.patient != null) 
            this.closePatientMenuActionPerformed(evt);
        
        if (this.superPatient != null)
            this.closeMultiAcqMenuActionPerformed(evt);
        
        this.patientDescriptTextField.setText("Ouverture de la multi acquisition en cours...\n");
        
        //On ouvre les différentes série une par une 
        
        //SERIE DYNAMIQUE DE DEPART
        PatientSerie startDynSerie; 
        this.patientDescriptTextField.append("Ouverture de la première série dynamique en cours...\n");
        startDynSerie = chooseSerie(true);
        
        //SERIE STATIQUE
        PatientSerie staticSerie;
        this.patientDescriptTextField.append("Ouverture de la série statique en cours...\n");
        staticSerie = chooseSerie(false);
        
        //SERIE DYNAMIQUE DE FIN
        PatientSerie endDynSerie; 
        this.patientDescriptTextField.append("Ouverture de la dernière série dynamique en cours...\n");
        endDynSerie = chooseSerie(true);
        
        //PatientMultiSeries pms = new PatientMultiSeries()
    }//GEN-LAST:event_openMultiAcqMenuActionPerformed

    private void closeMultiAcqMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeMultiAcqMenuActionPerformed
        this.superPatient = null;
    }//GEN-LAST:event_closeMultiAcqMenuActionPerformed
    /**
     * Ouvre une fenêtre pour choisir une série de patient
     * @param dynChoose Si vaut true alors on ouvre une série dynamique, sinon une série statique
     * @return PatientSerie
     */
    private PatientSerie chooseSerie(boolean dynSerie) {
        PatientSerie p = null;
        this.patientDescriptTextField.setText("Ouverture de la série dynamique en cours...");
        JFileChooser chooser = this.dynSerieChooser;
        if (!dynSerie)
            chooser = this.statSerieChooser;
        int returnVal = chooser.showOpenDialog(this);
        
        if (JFileChooser.APPROVE_OPTION == returnVal) {
            
            File choosenFile;
            choosenFile = chooser.getSelectedFile();
           
            // Un fois le dossier choisi
            
            if (choosenFile != null) {
                String patientDirPath;
                if (choosenFile.isDirectory()) {
                    patientDirPath = choosenFile.getAbsolutePath();
                }
                else {
                    patientDirPath = choosenFile.getParent();
                }
                
                
                //On peut créer un nouveau patient
                
               
		try {
			p = new PatientSerie(patientDirPath);
                        JOptionPane.showMessageDialog(null, "L'acquisition a été ouverte avec succès\n\n"+p.toString(), "Info", JOptionPane.PLAIN_MESSAGE);
                        this.patientDescriptTextField.append(p.toString());
                        
                        
                        
                        System.out.println(p);
		} catch (NotDirectoryException | DicomFilesNotFoundException
                        | BadParametersException e) {
			// TODO Auto-generated catch block
                   
			JOptionPane.showMessageDialog(null, e.getMessage(), "Erreur", JOptionPane.ERROR_MESSAGE);
                        this.patientDescriptTextField.setText("Erreur Lors de l'ouverture...");
                        
		} 
                
		
                
            }
            else {
                JOptionPane.showMessageDialog(null, "Problem accessing the file!", "Erreur", JOptionPane.ERROR_MESSAGE);
            }
           
        } else {
            System.out.println("File access cancelled by user.");
        }
        return p;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(main_window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new main_window().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem closeAllMenu;
    private javax.swing.JMenuItem closeMultiAcqMenu;
    private javax.swing.JMenuItem closePatientMenu;
    private javax.swing.JDesktopPane desktop;
    private javax.swing.JMenuItem displayImagesMenu;
    private javax.swing.JFileChooser dynSerieChooser;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JMenuItem openMultiAcqMenu;
    private javax.swing.JMenuItem openPatientMenu;
    private javax.swing.JFileChooser patientChooser;
    private javax.swing.JTextArea patientDescriptTextField;
    private javax.swing.JFileChooser statSerieChooser;
    private javax.swing.JLabel viewerLabel;
    // End of variables declaration//GEN-END:variables
}
