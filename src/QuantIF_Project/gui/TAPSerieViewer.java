/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package QuantIF_Project.gui;

import QuantIF_Project.patient.PatientMultiSeries;
import QuantIF_Project.patient.exceptions.BadParametersException;
import QuantIF_Project.serie.TAPSerie;
import QuantIF_Project.utils.DicomUtils;
import ij.ImagePlus;
import ij.ImageStack;
import ij.plugin.LutLoader;
import ij.process.ByteProcessor;
import ij.process.LUT;
import ij.process.ShortProcessor;
import ij.process.StackConverter;
import ij3d.Content;
import ij3d.Image3DUniverse;
import java.awt.Component;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.event.MouseMotionListener;
import java.awt.event.MouseWheelEvent;
import java.awt.image.BufferedImage;
import javax.swing.ImageIcon;
import javax.swing.JInternalFrame;
import javax.swing.plaf.basic.BasicInternalFrameUI;










/**
 *
 * @author Cyriac
 */
public class TAPSerieViewer extends javax.swing.JInternalFrame {
    
    /**
     * TEPSerie à afficher
     */
    private final TAPSerie tapSerie;
    
    /**
     * PatientMultiSeries à afficher
     */
    private final PatientMultiSeries patientMultiSeries;
    
    
    /**
     * Nombre total d'images à afficher
     */
    private int nbImages;
    
    /**
     * ID de l'image en cours d'affichage
     */
    private int currentImageID;
    
    
    
    
    
    /**
     * Luminosité des images
     */
    private int maxBrightness;
    private int minBrightness;
   
    
      
    /**
     * Somme d'images a afficher
     */
    private BufferedImage[] displayedImages;
    
    /**
     * nombre d'images par coupe temporelle
     */
    private int imagesPerBlock;
    
    /**
     * Nombre de coupes temporelle
     */
    private int nbBlocks;
    
    /**
     * Unité de la valeur du pixel
     */
    private String pixelUnity;
    
    /**
     * Taille de l'image affichée
     */
    private static int IMAGE_SIZE;
    
    /**
     * Creates new form AfficherImages
     * @param tapSerie Acquisition corps entier
     * 
     */
    public TAPSerieViewer(TAPSerie tapSerie) {
        initComponents();
        this.setDefaultCloseOperation(JInternalFrame.DISPOSE_ON_CLOSE);
        
        this.tapSerie = tapSerie;
        this.patientMultiSeries = null;
        
        if (!this.tapSerie.isPartOfMultAcq()) {
            this.chooseBodyBlockButton.setVisible(false);
            this.chooseBodyBlockButton.setEnabled(false);
        }
        updateComponents();
        
        
        display(currentImageID);
        
        //On empeche la fenêtre interne de pouvoir être déplacée
        BasicInternalFrameUI bifui = (BasicInternalFrameUI) this.getUI();
        Component northPane = bifui.getNorthPane();
        MouseMotionListener[] motionListeners = (MouseMotionListener[]) northPane.getListeners(MouseMotionListener.class);

        for (MouseMotionListener listener: motionListeners)
            northPane.removeMouseMotionListener(listener);
   
        
        //On gère les radioButton pr les différentes séries
     
        
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        maskFileChooser = new javax.swing.JFileChooser();
        leftButtons = new javax.swing.JPanel();
        tridimObsButton = new javax.swing.JButton();
        prevTEPSerieButton = new javax.swing.JToggleButton();
        rightButtons = new javax.swing.JPanel();
        slidersMinMax = new javax.swing.JPanel();
        sliderMin = new javax.swing.JSlider();
        sliderMax = new javax.swing.JSlider();
        chooseBodyBlockButton = new javax.swing.JButton();
        allImage = new javax.swing.JPanel();
        imageOptions = new javax.swing.JPanel();
        imageIDTextField = new javax.swing.JTextField();
        tempsAcq = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        acquisitionTimeTextField = new javax.swing.JTextField();
        changeImageButtons = new javax.swing.JPanel();
        nextButton = new javax.swing.JButton();
        prevButton = new javax.swing.JButton();
        imageSlider = new javax.swing.JSlider();
        imagePanel = new javax.swing.JPanel();
        tapImageLabel = new javax.swing.JLabel();

        maskFileChooser.setDialogTitle("Choisir le dossier du masque");
        maskFileChooser.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);

        setBorder(null);
        setIconifiable(true);
        setTitle("TAP Serie Viewer");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setFocusable(false);
        try {
            setSelected(true);
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }
        setVisible(true);
        getContentPane().setLayout(new java.awt.BorderLayout(50, 0));

        leftButtons.setLayout(new java.awt.GridLayout(5, 2, 50, 50));

        tridimObsButton.setText("Observation 3D");
        tridimObsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tridimObsButtonActionPerformed(evt);
            }
        });
        leftButtons.add(tridimObsButton);

        prevTEPSerieButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        prevTEPSerieButton.setText("<html>Prévisualisation série TEP de départ </html>");
        prevTEPSerieButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevTEPSerieButtonActionPerformed(evt);
            }
        });
        leftButtons.add(prevTEPSerieButton);

        getContentPane().add(leftButtons, java.awt.BorderLayout.WEST);

        rightButtons.setLayout(new java.awt.GridLayout(8, 1));

        slidersMinMax.setLayout(new java.awt.GridLayout(2, 1));

        sliderMin.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        sliderMin.setMaximum(100000);
        sliderMin.setSnapToTicks(true);
        sliderMin.setBorder(javax.swing.BorderFactory.createTitledBorder("Min"));
        sliderMin.setValueIsAdjusting(true);
        sliderMin.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderMinStateChanged(evt);
            }
        });
        slidersMinMax.add(sliderMin);

        sliderMax.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        sliderMax.setMaximum(100000);
        sliderMax.setMinorTickSpacing(1);
        sliderMax.setPaintLabels(true);
        sliderMax.setSnapToTicks(true);
        sliderMax.setToolTipText("");
        sliderMax.setValue(5);
        sliderMax.setBorder(javax.swing.BorderFactory.createTitledBorder("Max"));
        sliderMax.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        sliderMax.setValueIsAdjusting(true);
        sliderMax.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderMaxStateChanged(evt);
            }
        });
        slidersMinMax.add(sliderMax);

        rightButtons.add(slidersMinMax);

        chooseBodyBlockButton.setFont(new java.awt.Font("Lucida Console", 1, 12)); // NOI18N
        chooseBodyBlockButton.setText("CHOISIR CETTE COUPE CORPORELLE");
        chooseBodyBlockButton.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        chooseBodyBlockButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseBodyBlockButtonActionPerformed(evt);
            }
        });
        rightButtons.add(chooseBodyBlockButton);

        getContentPane().add(rightButtons, java.awt.BorderLayout.EAST);

        allImage.setLayout(new java.awt.BorderLayout());

        imageOptions.setLayout(new java.awt.BorderLayout());

        imageIDTextField.setEditable(false);
        imageIDTextField.setBackground(new java.awt.Color(204, 255, 255));
        imageIDTextField.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        imageIDTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        imageIDTextField.setText("               ");
        imageIDTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imageIDTextFieldActionPerformed(evt);
            }
        });
        imageOptions.add(imageIDTextField, java.awt.BorderLayout.NORTH);

        tempsAcq.setLayout(new javax.swing.BoxLayout(tempsAcq, javax.swing.BoxLayout.LINE_AXIS));

        jLabel4.setText("Temps d'acquisition (secondes)");
        tempsAcq.add(jLabel4);

        acquisitionTimeTextField.setEditable(false);
        acquisitionTimeTextField.setBackground(new java.awt.Color(204, 255, 255));
        acquisitionTimeTextField.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        acquisitionTimeTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acquisitionTimeTextFieldActionPerformed(evt);
            }
        });
        tempsAcq.add(acquisitionTimeTextField);

        imageOptions.add(tempsAcq, java.awt.BorderLayout.SOUTH);

        changeImageButtons.setLayout(new java.awt.BorderLayout());

        nextButton.setText(">>");
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });
        changeImageButtons.add(nextButton, java.awt.BorderLayout.EAST);

        prevButton.setText("<<");
        prevButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevButtonActionPerformed(evt);
            }
        });
        changeImageButtons.add(prevButton, java.awt.BorderLayout.WEST);

        imageSlider.setPaintLabels(true);
        imageSlider.setPaintTicks(true);
        imageSlider.setSnapToTicks(true);
        imageSlider.setValue(0);
        imageSlider.setPreferredSize(new java.awt.Dimension(512, 23));
        imageSlider.setValueIsAdjusting(true);
        imageSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                imageSliderStateChanged(evt);
            }
        });
        changeImageButtons.add(imageSlider, java.awt.BorderLayout.CENTER);

        imageOptions.add(changeImageButtons, java.awt.BorderLayout.CENTER);

        allImage.add(imageOptions, java.awt.BorderLayout.SOUTH);

        imagePanel.setLayout(new java.awt.GridBagLayout());

        tapImageLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 255), 2));
        tapImageLabel.setMaximumSize(null);
        tapImageLabel.setMinimumSize(null);
        tapImageLabel.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                tapImageLabelMouseWheelMoved(evt);
            }
        });
        imagePanel.add(tapImageLabel, new java.awt.GridBagConstraints());

        allImage.add(imagePanel, java.awt.BorderLayout.CENTER);

        getContentPane().add(allImage, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * Affiche la prochaine image
     * @param evt 
     */
    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
        
        if (this.currentImageID < this.imagesPerBlock ) {
            this.imageSlider.setValue(++this.currentImageID);
            
       }
        
    }//GEN-LAST:event_nextButtonActionPerformed

    private void prevButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prevButtonActionPerformed
        
        if (this.currentImageID > 1 ) {
           this.imageSlider.setValue(--this.currentImageID);
       }
        //display(currentImageID);
                           
    }//GEN-LAST:event_prevButtonActionPerformed

    private void imageSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_imageSliderStateChanged
        
        if (imageSlider.getValue() > 0)
            this.currentImageID = imageSlider.getValue() - 1;
        display(this.currentImageID);
    }//GEN-LAST:event_imageSliderStateChanged

    private void imageIDTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imageIDTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_imageIDTextFieldActionPerformed
    
    private void acquisitionTimeTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acquisitionTimeTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_acquisitionTimeTextFieldActionPerformed

    private void sliderMaxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderMaxStateChanged
        this.maxBrightness = this.sliderMax.getValue();
        
        display(this.currentImageID);
    }//GEN-LAST:event_sliderMaxStateChanged

    private void tapImageLabelMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_tapImageLabelMouseWheelMoved
        // TODO add your handling code here:
    }//GEN-LAST:event_tapImageLabelMouseWheelMoved

    private void sliderMinStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderMinStateChanged
        this.minBrightness = this.sliderMin.getValue();
         
        display(this.currentImageID);
    }//GEN-LAST:event_sliderMinStateChanged

    private void tridimObsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tridimObsButtonActionPerformed
        
        ImageStack imgStack = new ImageStack(this.tapSerie.getWidth(), this.tapSerie.getHeight(), null);
        ByteProcessor byteProc;
       
        
        for (BufferedImage buff : this.displayedImages) {
            BufferedImage b = new BufferedImage(this.tapSerie.getWidth(), this.tapSerie.getHeight(), BufferedImage.TYPE_BYTE_GRAY);
            Graphics2D g = b.createGraphics();
            g.drawImage(buff, null, 0, 0);
            
            byteProc = new ByteProcessor(b);
            imgStack.addSlice(byteProc);
        }
        ImagePlus imgPlus = new ImagePlus("", imgStack);
       
       
        //imgPlus.show();
        //On stoppe le thread si déjà ouvert
        Image3DUniverse univ = new Image3DUniverse();
        
        Thread thread;
        thread = new Thread("Affichage 3D") {
            @Override
            public void run() {
               
                new StackConverter(imgPlus).convertToGray8();

                // Create a universe and show it
                
                univ.show();
                
                // Add the image as a volume rendering
                Content c = univ.addVoltex(imgPlus);
                //c.setColor(new Color3f(255,255,255));
                
                
            }
        };
        thread.start();
        
         
    }//GEN-LAST:event_tridimObsButtonActionPerformed

    private void chooseBodyBlockButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseBodyBlockButtonActionPerformed
        this.tapSerie.setChoosenBodyBlock(this.currentImageID);
        
        this.dispose();
        
        
        
       
    }//GEN-LAST:event_chooseBodyBlockButtonActionPerformed

    private void prevTEPSerieButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prevTEPSerieButtonActionPerformed
       
    }//GEN-LAST:event_prevTEPSerieButtonActionPerformed
    
    /**
     * Affiche l'image d'id imageID dans la fenetre
     * @param imageID id de l'image à afficher
     * @throws BadParametersException
     *      Levée lorsqu'aucune image ne correspond à imageID
     */
    private void display(int imageID){
        
        BufferedImage bufferedImage;
        
        bufferedImage = this.displayedImages[imageID];
        
        int w = imagePanel.getWidth();
        int h = imagePanel.getHeight();
        
        if (w != 0 && h != 0) {
            if (w < h)
                IMAGE_SIZE = w*3/4;
            else
                IMAGE_SIZE = h*3/4;
            
        }
        else {
            IMAGE_SIZE = 600;
        }
           
        //On redimensionne l'image
        bufferedImage = rescale(bufferedImage, IMAGE_SIZE, IMAGE_SIZE);
        
       
        
        //On sature l'image
        bufferedImage = saturateImage(bufferedImage);
        
         //On applique la lookUpTable
        //bufferedImage = applyLut(bufferedImage, this.currentLUT);
        
        
        
        //On l'affiche dans la zone prévu a cet effet
        ImageIcon ii = new ImageIcon(bufferedImage);         
        tapImageLabel.setIcon(ii);
        imageIDTextField.setText((imageID + 1) + " / " + (this.displayedImages.length));
        /*
        this.champ1.setText(dcm.getAttribute(TagFromName.StudyInstanceUID));
        this.champ2.setText(""+dcm.getTimeSlice());
        this.champ3.setText(""+dcm.getSlice());
        */
       
        
    }
    
    /**
     * Redimensionne une image en largeur, en hauteur et aussi ajuste
     * le contraste
     * @param source l'image à redimensionner
     * @param newWidth nouvelle largeur
     * @param newHeight nouvelle hauteur
     * @return BufferedImage redimensionnée
     */
    public static BufferedImage rescale(BufferedImage source, int newWidth, int newHeight) {
        /* On crée une nouvelle image aux bonnes dimensions. */ 
       

        Image scaledInstance = source.getScaledInstance(newWidth, newHeight, BufferedImage.SCALE_FAST);
        BufferedImage buf = new BufferedImage(newWidth, newHeight, BufferedImage.TYPE_USHORT_GRAY); 
        Graphics2D g = buf.createGraphics(); 
        g.drawImage(scaledInstance, 0, 0, null);
        g.dispose();
       
      
        
        
        /* On retourne l'image bufferisée, qui est une image. */ 
        return buf; 
        
    }
    
    /**
     * Applique une LookUpTable à l'image DICOM
     * @param dcm image à modifier
     * @param lut LUT à appliquer
     * @return BufferedImage 
     */
    private BufferedImage applyLut(BufferedImage srcImg, LUT lut) {
        
        BufferedImage b = new BufferedImage(srcImg.getWidth(), srcImg.getHeight(), BufferedImage.TYPE_USHORT_GRAY);
        Graphics2D g = b.createGraphics();
        g.drawImage(srcImg, null, 0, 0);
        //System.out.println("Type de l'image :" + ));
        
        ImagePlus imp = new ImagePlus("", b);
        imp.setLut(lut);
       
       
        return imp.getBufferedImage();
    }
    
    /**
     * retourne la liste des images à la frameIndex
     * @param sliceIndex index de la coupe temporelle
     * @return 
     */
    private BufferedImage[] getImagesToDisplay ()  {
               
        return tapSerie.getAllImages();
    }
    
  
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField acquisitionTimeTextField;
    private javax.swing.JPanel allImage;
    private javax.swing.JPanel changeImageButtons;
    private javax.swing.JButton chooseBodyBlockButton;
    private javax.swing.JTextField imageIDTextField;
    private javax.swing.JPanel imageOptions;
    private javax.swing.JPanel imagePanel;
    private javax.swing.JSlider imageSlider;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel leftButtons;
    private javax.swing.JFileChooser maskFileChooser;
    private javax.swing.JButton nextButton;
    private javax.swing.JButton prevButton;
    private javax.swing.JToggleButton prevTEPSerieButton;
    private javax.swing.JPanel rightButtons;
    private javax.swing.JSlider sliderMax;
    private javax.swing.JSlider sliderMin;
    private javax.swing.JPanel slidersMinMax;
    private javax.swing.JLabel tapImageLabel;
    private javax.swing.JPanel tempsAcq;
    private javax.swing.JButton tridimObsButton;
    // End of variables declaration//GEN-END:variables
    
    

    private BufferedImage saturateImage(BufferedImage buff) {
          BufferedImage b = new BufferedImage(buff.getWidth(), buff.getHeight(), BufferedImage.TYPE_USHORT_GRAY);
          Graphics2D g = b.createGraphics();
          g.drawImage(buff, 0, 0, null);
          ShortProcessor sp = new ShortProcessor(b);
          sp.setMinAndMax(this.minBrightness, this.maxBrightness);
          return sp.getBufferedImage();
        
    }
    
    /**
     * Fait la somme de deux coupe temporelle
     * @param s1 coupe de départ
     * @param s2 coupe d'arrivée
     * @return Tableau de BufferedImage
     */
    private BufferedImage[] getSummSlices(int s1, int s2) {
        BufferedImage[] buffs = new BufferedImage[this.imagesPerBlock];
        float[][] imagePixels = this.tapSerie.summSlices(s1, s2); 
        for (int frame = 0; frame < this.imagesPerBlock; frame++) {
              buffs[frame] = DicomUtils.pixelsToBufferedImage(this.tapSerie.getWidth(), this.tapSerie.getHeight(), imagePixels[frame]);
        }
        
        return buffs;
    }

    private void updateComponents() {
        
        System.out.println("On mets à jour les composants");
       //this.nbImages = p.getMaxDicomImage();
        this.pixelUnity = this.tapSerie.getPixelUnity();
        this.currentImageID = 0;
        
        
        
        
        
        
        
        
        this.nbBlocks = this.tapSerie.getNbBlocks();
        
        this.displayedImages = getImagesToDisplay();
        this.imagesPerBlock = this.displayedImages.length;
        
         //Slider de luminosité
         //On sature le moins possible l'image au début
        this.sliderMax.setValue(this.sliderMax.getMaximum());
        this.sliderMin.setValue(this.sliderMax.getMinimum());
        
        
       
        
        
        //Slider Settings
        imageSlider.setMaximum(imagesPerBlock);
        imageSlider.setMinimum(1);
            //On ajoute la détection de la molette de la souris
        imageSlider.addMouseWheelListener((MouseWheelEvent e) -> {
            int inc = e.getWheelRotation();
            int val = imageSlider.getValue() - inc;
            imageSlider.setValue(val);
        });
        
        
        
      
            
            
        
        //imageIDTextField Settings
        imageIDTextField.setEditable(false);
        acquisitionTimeTextField.setEditable(false);
        
        this.repaint();
       
    }
  

    
}
