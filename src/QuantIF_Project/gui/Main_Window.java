/* 
 * This Code belongs to his creator Cyriac Azefack and the lab QuantIF of the "Centre Henri Becquerel of Rouen"
 *   * 
 */
package QuantIF_Project.gui;


import QuantIF_Project.patient.exceptions.BadParametersException;
import QuantIF_Project.patient.exceptions.DicomFilesNotFoundException;
import QuantIF_Project.patient.exceptions.NotDirectoryException;
import QuantIF_Project.serie.TEPSerie;
import QuantIF_Project.patient.PatientMultiSeries;
import QuantIF_Project.patient.exceptions.NoTAPSerieFoundException;
import QuantIF_Project.serie.TAPSerie;
import QuantIF_Project.patient.exceptions.PatientStudyException;
import QuantIF_Project.patient.exceptions.SeriesOrderException;
import QuantIF_Project.process.Barbolosi;
import QuantIF_Project.process.ParaPET;
import QuantIF_Project.process.Hunter;
import QuantIF_Project.process.Patlak;
import QuantIF_Project.serie.Serie;
import ij.IJ;
import java.awt.Component;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.event.InternalFrameAdapter;
import javax.swing.event.InternalFrameEvent;
import javax.swing.text.DefaultCaret;



/**
 *
 * @author Cyriac
 */
public class Main_Window extends javax.swing.JFrame {

    
    
       
    /**
     * TEPSerie en cours d'observation
     */
    private Serie patient;
    
    private PatientMultiSeries patientMultiSeries;
    
    /**
     * Verrou de synchronisation
     */
    private static Object lock;
    private TAPSerieViewer tsv;
    private static PatientSerieViewer psv;
    private boolean openCancelled;
    
    /**
     * Creates new form main_window
     */
    public Main_Window() {
        initComponents();
        this.patient = null;
        this.patientMultiSeries = null;
        
        Main_Window.lock = new Object();
        //On ferme toutes instances de IJ
        IJ.run("Close All");
        this.quantMethods.setEnabled(false);
        this.tsv = null;
        this.psv = null;
        
        //On gère l'autoscroll de la console
        DefaultCaret caret = (DefaultCaret)console.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
        
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        patientChooser = new javax.swing.JFileChooser();
        dynSerieChooser = new javax.swing.JFileChooser();
        statSerieChooser = new javax.swing.JFileChooser();
        desktop = new javax.swing.JDesktopPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        console = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        openTEPSerie = new javax.swing.JMenuItem();
        openTAPSerie = new javax.swing.JMenuItem();
        closeAllSeries = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        openMultiAcqMenu = new javax.swing.JMenuItem();
        closeMultiAcqMenu = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        closeAllMenu = new javax.swing.JMenuItem();
        quantMethods = new javax.swing.JMenu();
        patlakQuantMethod = new javax.swing.JMenuItem();
        hunterQuantMethod = new javax.swing.JMenuItem();
        barbQuantMethod = new javax.swing.JMenuItem();
        paraPETQuantMethod = new javax.swing.JMenuItem();

        patientChooser.setDialogTitle("Selectionnez un dossier patient");
        patientChooser.setFileHidingEnabled(false);

        dynSerieChooser.setDialogTitle("Sélectionnez une série dynamique");
        dynSerieChooser.setFileHidingEnabled(false);

        statSerieChooser.setDialogTitle("Selectionnez la série statique");
        statSerieChooser.setFileHidingEnabled(false);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("QuantIF_Project");
        setAutoRequestFocus(false);
        setBackground(new java.awt.Color(255, 255, 255));
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        setForeground(java.awt.Color.darkGray);

        desktop.setLayout(new java.awt.BorderLayout());
        getContentPane().add(desktop, java.awt.BorderLayout.CENTER);

        jScrollPane1.setFocusable(false);
        jScrollPane1.setRequestFocusEnabled(false);
        jScrollPane1.setVerifyInputWhenFocusTarget(false);

        console.setEditable(false);
        console.setBackground(new java.awt.Color(255, 255, 255));
        console.setColumns(20);
        console.setFont(new java.awt.Font("Lucida Console", 0, 12)); // NOI18N
        console.setLineWrap(true);
        console.setRows(5);
        console.setText("PAS DE PATIENT EN COURS");
        console.setToolTipText("Output");
        console.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "System Output", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.ABOVE_TOP));
        console.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane1.setViewportView(console);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.PAGE_END);

        jMenu1.setText("Application");
        jMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu1ActionPerformed(evt);
            }
        });

        openTEPSerie.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openTEPSerie.setText("Ouvrir une série TEP");
        openTEPSerie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openTEPSerieActionPerformed(evt);
            }
        });
        jMenu1.add(openTEPSerie);

        openTAPSerie.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openTAPSerie.setText("Ouvrir une série TAP");
        openTAPSerie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openTAPSerieActionPerformed(evt);
            }
        });
        jMenu1.add(openTAPSerie);

        closeAllSeries.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
        closeAllSeries.setText("Fermer série en cours");
        closeAllSeries.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeAllSeriesActionPerformed(evt);
            }
        });
        jMenu1.add(closeAllSeries);
        jMenu1.add(jSeparator2);

        openMultiAcqMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        openMultiAcqMenu.setText("Ouvrir une Multi Acquisition");
        openMultiAcqMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMultiAcqMenuActionPerformed(evt);
            }
        });
        jMenu1.add(openMultiAcqMenu);

        closeMultiAcqMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        closeMultiAcqMenu.setText("Fermer une Multi Acquisition");
        closeMultiAcqMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeMultiAcqMenuActionPerformed(evt);
            }
        });
        jMenu1.add(closeMultiAcqMenu);
        jMenu1.add(jSeparator3);

        closeAllMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        closeAllMenu.setText("Quitter");
        closeAllMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeAllMenuActionPerformed(evt);
            }
        });
        jMenu1.add(closeAllMenu);

        jMenuBar1.add(jMenu1);

        quantMethods.setText("Méthodes de quantification");
        quantMethods.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quantMethodsActionPerformed(evt);
            }
        });

        patlakQuantMethod.setText("Patlak");
        patlakQuantMethod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patlakQuantMethodActionPerformed(evt);
            }
        });
        quantMethods.add(patlakQuantMethod);

        hunterQuantMethod.setText("Hunter");
        hunterQuantMethod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hunterQuantMethodActionPerformed(evt);
            }
        });
        quantMethods.add(hunterQuantMethod);

        barbQuantMethod.setText("Barbolosi");
        barbQuantMethod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                barbQuantMethodActionPerformed(evt);
            }
        });
        quantMethods.add(barbQuantMethod);

        paraPETQuantMethod.setText("ParaPET");
        paraPETQuantMethod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paraPETQuantMethodActionPerformed(evt);
            }
        });
        quantMethods.add(paraPETQuantMethod);

        jMenuBar1.add(quantMethods);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeAllMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeAllMenuActionPerformed
        this.dispose();
    }//GEN-LAST:event_closeAllMenuActionPerformed

    private void jMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu1ActionPerformed
                                  
    }//GEN-LAST:event_jMenu1ActionPerformed

    private void openTEPSerieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openTEPSerieActionPerformed
        
        
        if (this.patient != null || this.patientMultiSeries != null ) 
            this.closeAllSeriesActionPerformed(evt);
        
        
            
        
        Main_Window.println("Ouverture du patient en cours...");
        int returnVal = patientChooser.showOpenDialog(this);
        
        if (JFileChooser.APPROVE_OPTION == returnVal) {
            
            File choosenFile;
            choosenFile = patientChooser.getSelectedFile();
           
            // Un fois le dossier choisi
            
            if (choosenFile != null) {
                String patientDirPath;
                if (choosenFile.isDirectory()) {
                    patientDirPath = choosenFile.getAbsolutePath();
                }
                else {
                    patientDirPath = choosenFile.getParent();
                }
                
                
                //On peut créer un nouveau patient
                
               
		try {
			this.patient = new TEPSerie(patientDirPath);
                        
                        JOptionPane.showMessageDialog(desktop, "Le dossier patient a été ouvert avec succès\n\n"+this.patient.toString(), "Info", JOptionPane.PLAIN_MESSAGE);
                        Main_Window.println(this.patient.toString());
                        displayImages();
                        
                        
                        
                        System.out.println(this.patient);
		} catch (NotDirectoryException | DicomFilesNotFoundException
                        | BadParametersException e) {
			// TODO Auto-generated catch block
                   
			JOptionPane.showMessageDialog(desktop, e.getMessage(), "Erreur", JOptionPane.ERROR_MESSAGE);
                        Main_Window.println("PAS DE PATIENT EN COURS");
                        this.openTEPSerieActionPerformed(evt);
		} 
                
		
                
            }
            else {
                JOptionPane.showMessageDialog(desktop, "Problem accessing the file!", "Erreur", JOptionPane.ERROR_MESSAGE);
                Main_Window.println("PAS DE PATIENT EN COURS");
            }
           
        } else {
            System.out.println("File access cancelled by user.");
            Main_Window.println("PAS DE PATIENT EN COURS");
        }
    }//GEN-LAST:event_openTEPSerieActionPerformed

    private void closeAllSeriesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeAllSeriesActionPerformed
        Component[] components = this.desktop.getComponents();
        for (Component component : components) {

            this.desktop.remove(component);
            this.desktop.validate();
            this.desktop.repaint();
            
        }
        this.patient = null;
        this.patientMultiSeries = null;
        JOptionPane.showMessageDialog(desktop, "L'acquisition en cours a été fermée", "Infos", JOptionPane.INFORMATION_MESSAGE);
        Main_Window.println("PAS DE PATIENT EN COURS");
    }//GEN-LAST:event_closeAllSeriesActionPerformed

    private void openMultiAcqMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMultiAcqMenuActionPerformed
        
        this.openCancelled = false;
        //On ferme le patient ou la multi acquisition ouvert avant
        if (this.patient != null) 
            this.closeAllSeriesActionPerformed(evt);
        
        if (this.patientMultiSeries != null)
            this.closeMultiAcqMenuActionPerformed(evt);
        
        Main_Window.println("Début Ouverture de la Multi Acquisition!!\n");
        
        //On ouvre les différentes série une par une 
        
        //SERIE DYNAMIQUE DE DEPART
        TEPSerie startDynSerie; 
        Main_Window.println("Ouverture de la première série dynamique en cours...\n");
        startDynSerie = chooseTEPSerie(true);
        
        if (!openCancelled) {
        
            //SERIE STATIQUE
            TAPSerie staticSerie;
            Main_Window.println("\n\nOuverture de la série statique en cours...\n");
            staticSerie = chooseTAPSerie(startDynSerie);
            
            if (!openCancelled) {


                TAPSerieViewer tapViewer = new TAPSerieViewer(staticSerie);


                //Thread gérant l'attente du choix de la coupe corporelle
                Thread choosingBodyBlockThread = new Thread("Choosing Body block Thread") {
                    public void run() {
                        synchronized(lock) {
                            while (tapViewer.isVisible()) {
                                try {
                                    Main_Window.println("Selection de la coupe corporelle en cours...");
                                    System.out.println("Waiting choice...");
                                    lock.wait();

                                } catch (InterruptedException e) {
                                    e.printStackTrace();
                                }
                            }
                            Main_Window.print(" [TERMINE]");
                            System.out.println("INIT SERIE TAP fini ");

                        }
                    }
                };



                

               //On debloque le vérrou a la fermeture de la fenêtre de choix de coupe corporelle
                tapViewer.addInternalFrameListener(new InternalFrameAdapter () {

                    @Override
                    public void internalFrameClosed(InternalFrameEvent e) {
                        
                        synchronized (lock) {
                            tapViewer.setVisible(false);

                            lock.notify();
                        }
                    }

                });
                tapViewer.setVisible(true);
                this.desktop.add(tapViewer);
                choosingBodyBlockThread.start();
                



                //SERIE DYNAMIQUE DE FIN

                Thread dynamicChoiceThread = new Thread("Dynamic waiting thread") {

                    /**
                     * Attends le thread de la TAP avant de commencer celui de la dernière série dynamique
                     */
                    @Override
                    public void run() {
                        try {
                            //On attends la sélection de la coupe corporelle
                            choosingBodyBlockThread.join();
                            Main_Window.println("Ouverture de la dernière série dynamique en cours...\n");
                            TEPSerie endDynSerie = chooseTEPSerie(false);
                            if (!openCancelled) {

                                if ((startDynSerie != null) && (staticSerie != null) && (endDynSerie != null)) {
                                    try {
                                        patientMultiSeries = new PatientMultiSeries(startDynSerie, staticSerie, endDynSerie);
                                        JOptionPane.showMessageDialog(desktop, "La multi-acquisition a été ouverte avec succès", "Info", JOptionPane.PLAIN_MESSAGE);
                                        //On affiche les images de la mutli-série
                                        displayImages();

                                        //On active les méthodes de quantification
                                        quantMethods.setEnabled(true);
                                        
                                    } catch (SeriesOrderException ex) {
                                        JOptionPane.showMessageDialog(desktop, ex.getMessage(), "Erreur", JOptionPane.ERROR_MESSAGE);
                                        Main_Window.println("PAS DE PATIENT EN COURS");
                                    } catch (PatientStudyException ex) {
                                        Logger.getLogger(Main_Window.class.getName()).log(Level.SEVERE, null, ex);
                                    }
                                } else {
                                    System.out.println("PEUT PAS OUVRIR MULTI ACQ (Une série est \"null\") ");
                                }
                            }
                        } catch (InterruptedException ex) {
                            Logger.getLogger(Main_Window.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }

                };
                System.out.println("Dynamic choice thread starting!");
                dynamicChoiceThread.start();
                
            }
            
        }
        
    }//GEN-LAST:event_openMultiAcqMenuActionPerformed

    private void closeMultiAcqMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeMultiAcqMenuActionPerformed
        this.patientMultiSeries = null;
        this.desktop.removeAll();
    }//GEN-LAST:event_closeMultiAcqMenuActionPerformed

    private void openTAPSerieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openTAPSerieActionPerformed
        if (this.patient != null || this.patientMultiSeries != null )
        this.closeAllSeriesActionPerformed(evt);

        Main_Window.println("Ouverture de la Série en cours...");
        int returnVal = patientChooser.showOpenDialog(this);

        if (JFileChooser.APPROVE_OPTION == returnVal) {

            File choosenFile;
            choosenFile = patientChooser.getSelectedFile();

            // Un fois le dossier choisi

            if (choosenFile != null) {
                String patientDirPath;
                if (choosenFile.isDirectory()) {
                    patientDirPath = choosenFile.getAbsolutePath();
                }
                else {
                    patientDirPath = choosenFile.getParent();
                }

                //On peut créer un nouveau patient

                try {
                    this.patient = new TAPSerie(patientDirPath);
                    JOptionPane.showMessageDialog(desktop, "La série TAP corps entier a été ouverte avec succès\n\n"+this.patient.toString(), "Info", JOptionPane.PLAIN_MESSAGE);
                    Main_Window.println(this.patient.toString());
                    displayImages();

                    System.out.println(this.patient);
                } catch (NotDirectoryException | DicomFilesNotFoundException
                    | BadParametersException e) {
                    // TODO Auto-generated catch block

                    JOptionPane.showMessageDialog(desktop, e.getMessage(), "Erreur", JOptionPane.ERROR_MESSAGE);
                    Main_Window.println("PAS DE PATIENT EN COURS");
                    this.openTEPSerieActionPerformed(evt);
                } catch (NoTAPSerieFoundException ex) {
                    Logger.getLogger(Main_Window.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
            else {
                JOptionPane.showMessageDialog(desktop, "Problem accessing the file!", "Erreur", JOptionPane.ERROR_MESSAGE);
                Main_Window.println("PAS DE PATIENT EN COURS");
            }

        } else {
            System.out.println("File access cancelled by user.");
            Main_Window.println("PAS DE PATIENT EN COURS");
        }
    }//GEN-LAST:event_openTAPSerieActionPerformed

    private void patlakQuantMethodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patlakQuantMethodActionPerformed
        Main_Window.println("####################### PATLAK #######################\n");
        Patlak patlak = new Patlak(patientMultiSeries);
        Main_Window.println("####################### FIN PATLAK #######################\n");
    }//GEN-LAST:event_patlakQuantMethodActionPerformed

    private void hunterQuantMethodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hunterQuantMethodActionPerformed
        Main_Window.println("####################### HUNTER #######################\n");
        Hunter hunter = new Hunter(patientMultiSeries, 0, 0, true);
        Main_Window.println("####################### FIN HUNTER #######################\n");
    }//GEN-LAST:event_hunterQuantMethodActionPerformed

    private void quantMethodsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quantMethodsActionPerformed
        
    }//GEN-LAST:event_quantMethodsActionPerformed

    private void paraPETQuantMethodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paraPETQuantMethodActionPerformed
        Main_Window.println("####################### PARAPET #######################\n");
        ParaPET paraPET = new ParaPET(patientMultiSeries);
        Main_Window.println("####################### FIN PARAPET #######################\n");
    }//GEN-LAST:event_paraPETQuantMethodActionPerformed

    private void barbQuantMethodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_barbQuantMethodActionPerformed
        Main_Window.println("####################### BARBOLOSI #######################\n");
        Barbolosi barbolosi = new Barbolosi(patientMultiSeries);
        Main_Window.println("########## Resultats BARBOLOSI #########");
        double[] kivb = barbolosi.getKiAndVb();
        Main_Window.println("########## Ki = " + kivb[0] + " #########");
        Main_Window.println("########## Vb = " + kivb[1] + " #########");
        
        Main_Window.println("####################### FIN BARBOLOSI #######################\n");
    }//GEN-LAST:event_barbQuantMethodActionPerformed
    /**
     * Ouvre une fenêtre pour choisir une série de patient
     * @param dynChoose Si vaut true alors on ouvre une série dynamique, sinon une série statique
     * @return TEPSerie
     */
    private TEPSerie chooseTEPSerie(boolean isFirst) {
        TEPSerie p = null;
        
       
        JFileChooser chooser = this.dynSerieChooser;
        int returnVal = chooser.showOpenDialog(this);
        
        if (JFileChooser.APPROVE_OPTION == returnVal) {
            
            File choosenFile;
            choosenFile = chooser.getSelectedFile();
           
            // Un fois le dossier choisi
            
            if (choosenFile != null) {
                String patientDirPath;
                if (choosenFile.isDirectory()) {
                    patientDirPath = choosenFile.getAbsolutePath();
                }
                else {
                    patientDirPath = choosenFile.getParent();
                }
                
                
                //On peut créer un nouveau patient
                
               
		try {
			p = new TEPSerie(patientDirPath, true, isFirst);
                        JOptionPane.showMessageDialog(desktop, "L'acquisition a été ouverte avec succès\n\n"+p.toString(), "Info", JOptionPane.PLAIN_MESSAGE);
                        
                        Main_Window.println(p.toString());
                        
                        
                        
                        System.out.println(p);
		} catch (NotDirectoryException | DicomFilesNotFoundException
                        | BadParametersException e) {
			// TODO Auto-generated catch block
                        this.openCancelled = true;
			JOptionPane.showMessageDialog(desktop, e.getMessage(), "Erreur", JOptionPane.ERROR_MESSAGE);
                        Main_Window.println("Erreur Lors de l'ouverture...");
                        
		} 
                
		
                
            }
            else {
                this.openCancelled = true;
                JOptionPane.showMessageDialog(desktop, "Problem accessing the file!", "Erreur", JOptionPane.ERROR_MESSAGE);
            }
           
        } else {
            this.openCancelled = true;
            Main_Window.println("\nAnnulation ouverture série TEP!!\n");
            Main_Window.println("PAS DE PATIENT EN COURS!!\n");
        }
        return p;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
      
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main_Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Main_Window().setVisible(true);
        });
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem barbQuantMethod;
    private javax.swing.JMenuItem closeAllMenu;
    private javax.swing.JMenuItem closeAllSeries;
    private javax.swing.JMenuItem closeMultiAcqMenu;
    private static javax.swing.JTextArea console;
    private javax.swing.JDesktopPane desktop;
    private javax.swing.JFileChooser dynSerieChooser;
    private javax.swing.JMenuItem hunterQuantMethod;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JMenuItem openMultiAcqMenu;
    private javax.swing.JMenuItem openTAPSerie;
    private javax.swing.JMenuItem openTEPSerie;
    private javax.swing.JMenuItem paraPETQuantMethod;
    private javax.swing.JFileChooser patientChooser;
    private javax.swing.JMenuItem patlakQuantMethod;
    private javax.swing.JMenu quantMethods;
    private javax.swing.JFileChooser statSerieChooser;
    // End of variables declaration//GEN-END:variables

    private synchronized TAPSerie chooseTAPSerie(TEPSerie startTEPSerie) {
        TAPSerie tapSerie = null;
        
       
        JFileChooser chooser = this.statSerieChooser;
        int returnVal = chooser.showOpenDialog(this);
        
        if (JFileChooser.APPROVE_OPTION == returnVal) {
            
            File choosenFile;
            choosenFile = chooser.getSelectedFile();
           
            // Un fois le dossier choisi
            
            if (choosenFile != null) {
                String patientDirPath;
                if (choosenFile.isDirectory()) {
                    patientDirPath = choosenFile.getAbsolutePath();
                }
                else {
                    patientDirPath = choosenFile.getParent();
                }
                
                
                //On peut créer un nouveau patient
                
               
		try {
			System.out.println("INIT SERIE TAP");
                        tapSerie = new TAPSerie(patientDirPath, true, startTEPSerie);
                        JOptionPane.showMessageDialog(desktop, "L'acquisition a été ouverte avec succès\n\n"+tapSerie.toString(), "Info", JOptionPane.PLAIN_MESSAGE);
                        Main_Window.println(tapSerie.toString());
                        
                        
                        
                        
                       
                        
                    
                        
		} catch (NotDirectoryException | DicomFilesNotFoundException
                        | BadParametersException | NoTAPSerieFoundException e) {
			// TODO Auto-generated catch block
                        
                        this.openCancelled = true;
			JOptionPane.showMessageDialog(desktop, e.getMessage(), "Erreur", JOptionPane.ERROR_MESSAGE);
                        Main_Window.println("Erreur Lors de l'ouverture...\nAnnulation de l'ouverture!!");
                        
		} 
                
		
                
            }
            else {
                this.openCancelled = true;
                JOptionPane.showMessageDialog(desktop, "Problem accessing the file!", "Erreur", JOptionPane.ERROR_MESSAGE);
            }
           
        } else {
            this.openCancelled = true;
            Main_Window.println("\nAnnulation ouverture série TAP!!\n");
            Main_Window.println("PAS DE PATIENT EN COURS!!\n");
        }
        return tapSerie;
    }
    
    private void displayImages() {
        if (this.patient != null) {

            if (patient instanceof TAPSerie) {
                this.tsv = new TAPSerieViewer((TAPSerie) this.patient);
                tsv.setVisible(true);
                tsv.setVisible(true);
                this.desktop.add(tsv);
                this.desktop.setSelectedFrame(tsv);
            }
            else {

                this.psv = new PatientSerieViewer(this.patient);
                psv.setVisible(true);

                //psv.setSize(this.viewerLabel.getSize());
                //psv.setSize(this.viewerLabel.getSize());
                psv.setVisible(true);
                this.desktop.add(psv);
                this.desktop.setSelectedFrame(psv);
            }

        }
        else if (this.patientMultiSeries != null) {
            this.psv = new PatientSerieViewer(this.patientMultiSeries);
            psv.show();
            //Pour rendre la fenêtre immobile

            //psv.setSize(this.viewerLabel.getSize());
            psv.setVisible(true);
            this.desktop.add(psv);
            this.desktop.setSelectedFrame(psv);
        }
        else {
            JOptionPane.showMessageDialog(desktop, "Aucun patient sélectionné ", "Erreur", JOptionPane.ERROR_MESSAGE);

        }
    }
    
    public static void print(String text) {
        console.append(text);
    }
    
    public static void println(String text) {
        console.append("\n"+text);
    }
}
