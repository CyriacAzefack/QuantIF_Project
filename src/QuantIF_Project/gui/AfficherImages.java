/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package QuantIF_Project.gui;

import QuantIF_Project.patient.DicomImage;
import QuantIF_Project.patient.Patient;
import QuantIF_Project.patient.exceptions.BadParametersException;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferByte;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;




/**
 *
 * @author Cyriac
 */
public class AfficherImages extends javax.swing.JInternalFrame {
    
    /**
     * Patient à afficher
     */
    private Patient patient;
    
    /**
     * Nombre total d'images à afficher
     */
    private int nbImages;
    
    /**
     * ID de l'image en cours d'affichage
     */
    private int currentImageID;
    
    
    /**
     * Creates new form AfficherImages
     * @param p
     * 
     */
    public AfficherImages(Patient p) {
        initComponents();
        this.patient = p;
        this.nbImages = p.getMaxDicomImage();
        this.currentImageID = 1;
        
        try {
            afficher(currentImageID);
        } catch (BadParametersException ex) {
            Logger.getLogger(AfficherImages.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //Slider Settings
        imageSlider.setMaximum(this.nbImages);
        imageSlider.setMinimum(1);
        
        //imageIDTextField Settings
        imageIDTextField.setEditable(false);
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nextButton = new javax.swing.JButton();
        prevButton = new javax.swing.JButton();
        imageSlider = new javax.swing.JSlider();
        imageIDTextField = new javax.swing.JTextField();
        imageLabel = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Images");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        nextButton.setText("Suivant -->>");
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        prevButton.setText("<<-- Précédent");
        prevButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevButtonActionPerformed(evt);
            }
        });

        imageSlider.setMinimum(1);
        imageSlider.setValue(0);
        imageSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                imageSliderStateChanged(evt);
            }
        });

        imageIDTextField.setText("               ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(imageSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(imageIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(prevButton, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(imageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 344, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nextButton, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(prevButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nextButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(imageLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addComponent(imageIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(imageSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * Affiche la prochaine image
     * @param evt 
     */
    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
       if (this.currentImageID < this.nbImages ) {
           this.currentImageID += 1;
       }
       
        try {
            afficher(currentImageID);
        } catch (BadParametersException ex) {
            Logger.getLogger(AfficherImages.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_nextButtonActionPerformed

    private void prevButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prevButtonActionPerformed
        if (this.currentImageID > 1 ) {
           this.currentImageID -= 1;
       }
        try {
            afficher(currentImageID);
        } catch (BadParametersException ex) {
            Logger.getLogger(AfficherImages.class.getName()).log(Level.SEVERE, null, ex);
        }
                                 
    }//GEN-LAST:event_prevButtonActionPerformed

    private void imageSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_imageSliderStateChanged
        this.currentImageID = imageSlider.getValue();
        try {
            // TODO add your handling code here:
            
            afficher(this.currentImageID);
        } catch (BadParametersException ex) {
            Logger.getLogger(AfficherImages.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_imageSliderStateChanged
    
    /**
     * Affiche l'image d'id imageID dans la fenetre
     * @param imageID
     * @throws BadParametersException
     *      Levée lorsqu'aucune image ne correspond à imageID
     */
    private void afficher(int imageID) throws BadParametersException {
        DicomImage dcm = this.patient.getDicomImage(imageID);
        
        BufferedImage bufferedImage = dcm.getBufferedImage();
        byte[] pixels =  ((DataBufferByte) bufferedImage.getRaster().getDataBuffer()).getData();
        //System.out.println(Arrays.toString(pixels));
        imageLabel.setIcon(new ImageIcon(bufferedImage));
        //imageLabel.setIcon(icon);
        imageIDTextField.setText(imageID + " / " + this.nbImages);
       
        System.out.println(Arrays.toString(pixels));
        
        int width = bufferedImage.getWidth();
        int height = bufferedImage.getHeight();
        
        for (int i = 0; i < width; i++) {
            for (int j=0; j < height; j++) {
                int rgb = bufferedImage.getRGB(j, i);
                int r = (rgb >> 16) & 0xFF;
                int g = (rgb >> 8) & 0xFF;
                int b = (rgb & 0xFF);
                int gray = (r + g + b) / 3;
                System.out.println(i + " x " + j + " : " + gray);
            }
        }
        
        
    }
    /*
    private Image convert2RedHot(Image img) {
        
    }
    */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField imageIDTextField;
    private javax.swing.JLabel imageLabel;
    private javax.swing.JSlider imageSlider;
    private javax.swing.JButton nextButton;
    private javax.swing.JButton prevButton;
    // End of variables declaration//GEN-END:variables
}
