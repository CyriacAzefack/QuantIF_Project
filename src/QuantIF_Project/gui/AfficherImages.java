/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package QuantIF_Project.gui;

import QuantIF_Project.patient.DicomImage;
import QuantIF_Project.mask.Mask;
import QuantIF_Project.patient.Patient;
import QuantIF_Project.patient.exceptions.BadMaskStructException;
import QuantIF_Project.patient.exceptions.BadParametersException;
import QuantIF_Project.patient.exceptions.ImageSizeException;
import QuantIF_Project.patient.exceptions.NotDirectoryException;
import com.pixelmed.dicom.TagFromName;
import ij.IJ;
import ij.ImagePlus;
import ij.ImageStack;
import ij.plugin.LutLoader;
import ij.plugin.Orthogonal_Views;
import ij.process.ImageProcessor;
import ij.process.LUT;
import java.awt.Graphics2D;
import java.awt.geom.AffineTransform;
import java.awt.image.BufferedImage;
import java.awt.image.RescaleOp;
import java.io.File;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;




/**
 *
 * @author Cyriac
 */
public class AfficherImages extends javax.swing.JInternalFrame {
    
    /**
     * Patient à afficher
     */
    private Patient patient;
    
    /**
     * Nombre total d'images à afficher
     */
    private int nbImages;
    
    /**
     * ID de l'image en cours d'affichage
     */
    private int currentImageID;
    
    /**
     * Masque du ROI à appliquer aux images
     */
    private Mask mask;
    
    /**
     * LUT en cours
     */
    private LUT currentLUT;
    
    /**
     * Luminosité des images
     */
    private int brightness;
    
    /**
     * facteur d'agrandissement de l'image;
     */
    private int scaleFactor;
    
    /**
     * Creates new form AfficherImages
     * @param p patient en cours
     * 
     */
    public AfficherImages(Patient p) {
        initComponents();
        this.patient = p;
        this.nbImages = p.getMaxDicomImage();
        this.currentImageID = 0;
        this.mask = null;
        this.currentLUT = LutLoader.openLut("luts\\Rainbow RGB.lut");
        this.brightness = 1;
        this.brightnessSlider.setValue(this.brightness);
        
        this.scaleFactor = 1;
        
        //Slider Settings
        imageSlider.setMaximum(this.nbImages);
        imageSlider.setMinimum(1);
        
        try {
            display(currentImageID);
        } catch (BadParametersException ex) {
            Logger.getLogger(AfficherImages.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        
        //imageIDTextField Settings
        imageIDTextField.setEditable(false);
        
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        maskFileChooser = new javax.swing.JFileChooser();
        nextButton = new javax.swing.JButton();
        prevButton = new javax.swing.JButton();
        imageSlider = new javax.swing.JSlider();
        imageIDTextField = new javax.swing.JTextField();
        imageLabel = new javax.swing.JLabel();
        roiChooser = new javax.swing.JButton();
        removeROI = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        champ1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        champ2 = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        champ3 = new javax.swing.JTextField();
        orthoDisplay = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        champ4 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        brightnessSlider = new javax.swing.JSlider();

        maskFileChooser.setDialogTitle("Choisir le dossier du masque");
        maskFileChooser.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setTitle("Viewer");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        try {
            setSelected(true);
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }
        setVisible(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        nextButton.setText("Image suivante");
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });
        getContentPane().add(nextButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 500, 120, 40));

        prevButton.setText("Image précédente");
        prevButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevButtonActionPerformed(evt);
            }
        });
        getContentPane().add(prevButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 500, 130, 40));

        imageSlider.setValue(0);
        imageSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                imageSliderStateChanged(evt);
            }
        });
        getContentPane().add(imageSlider, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 540, 980, 50));

        imageIDTextField.setEditable(false);
        imageIDTextField.setText("               ");
        imageIDTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imageIDTextFieldActionPerformed(evt);
            }
        });
        getContentPane().add(imageIDTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 470, 81, 28));

        imageLabel.setMaximumSize(new java.awt.Dimension(512, 512));
        imageLabel.setMinimumSize(new java.awt.Dimension(512, 512));
        getContentPane().add(imageLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 10, 512, 512));

        roiChooser.setText("Charger une ROI");
        roiChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roiChooserActionPerformed(evt);
            }
        });
        getContentPane().add(roiChooser, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 60, 170, 30));

        removeROI.setText("Enlever la ROI");
        removeROI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeROIActionPerformed(evt);
            }
        });
        getContentPane().add(removeROI, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 100, 170, 30));

        jLabel1.setText("UID Study ");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 40, -1, 20));

        champ1.setEditable(false);
        getContentPane().add(champ1, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 40, 560, -1));

        jLabel2.setText("timeSlice");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 70, -1, 20));

        champ2.setEditable(false);
        getContentPane().add(champ2, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 70, 560, -1));
        getContentPane().add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 30, 240, 10));

        jLabel3.setText("slice");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 100, -1, 20));

        champ3.setEditable(false);
        champ3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                champ3ActionPerformed(evt);
            }
        });
        getContentPane().add(champ3, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 100, 560, -1));

        orthoDisplay.setText("Affichage 3 plans");
        orthoDisplay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orthoDisplayActionPerformed(evt);
            }
        });
        getContentPane().add(orthoDisplay, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 233, 150, 40));

        jLabel4.setText("Acquisition Time");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 140, -1, -1));

        champ4.setEditable(false);
        champ4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                champ4ActionPerformed(evt);
            }
        });
        getContentPane().add(champ4, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 140, 560, -1));

        jLabel5.setText("Luminosité");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 200, -1, -1));

        brightnessSlider.setMajorTickSpacing(10);
        brightnessSlider.setMaximum(50);
        brightnessSlider.setMinorTickSpacing(5);
        brightnessSlider.setPaintLabels(true);
        brightnessSlider.setPaintTicks(true);
        brightnessSlider.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        brightnessSlider.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        brightnessSlider.setValueIsAdjusting(true);
        brightnessSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                brightnessSliderStateChanged(evt);
            }
        });
        getContentPane().add(brightnessSlider, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 190, 570, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * Affiche la prochaine image
     * @param evt 
     */
    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
       if (this.currentImageID < this.nbImages ) {
           this.currentImageID += 1;
       }
       
        try {
            display(currentImageID);
        } catch (BadParametersException ex) {
            Logger.getLogger(AfficherImages.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_nextButtonActionPerformed

    private void prevButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prevButtonActionPerformed
        if (this.currentImageID > 1 ) {
           this.currentImageID -= 1;
       }
        try {
            display(currentImageID);
        } catch (BadParametersException ex) {
            Logger.getLogger(AfficherImages.class.getName()).log(Level.SEVERE, null, ex);
        }
                                 
    }//GEN-LAST:event_prevButtonActionPerformed

    private void imageSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_imageSliderStateChanged
        
        if (imageSlider.getValue() > 0)
            this.currentImageID = imageSlider.getValue() - 1;
        try {
            // TODO add your handling code here:
            
            display(this.currentImageID);
        } catch (BadParametersException ex) {
            Logger.getLogger(AfficherImages.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_imageSliderStateChanged

    private void roiChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roiChooserActionPerformed
                // TODO add your handling code here:
         int returnVal = maskFileChooser.showOpenDialog(this);
        
        if (JFileChooser.APPROVE_OPTION == returnVal) {
            File directory;
            directory = maskFileChooser.getSelectedFile();
           
            // Un fois le dossier choisi
            
            if (directory != null) {
                
                String maskDirPath = directory.getAbsolutePath();
                
                
                //On peut créer un nouveau mask
                
		try {
			this.mask = new Mask(this.patient, maskDirPath);
                       
                        JOptionPane.showMessageDialog(null, "Le masque du ROI a été chargé avec succès", "Info", JOptionPane.INFORMATION_MESSAGE);
                        display(this.currentImageID);
		} catch (NotDirectoryException | BadParametersException | BadMaskStructException | ImageSizeException e) {
			// TODO Auto-generated catch block
              
                        JOptionPane.showMessageDialog(null, e.getMessage(), "Erreur", JOptionPane.ERROR_MESSAGE);
                        Logger.getLogger(AfficherImages.class.getName()).log(Level.SEVERE, null, e);
		
                } 
		
                
            }
            else {
                JOptionPane.showMessageDialog(null, "Problème d'accès au repertoire de fichiers", "Erreur", JOptionPane.ERROR_MESSAGE);
            }
           
        } else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_roiChooserActionPerformed

    private void imageIDTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imageIDTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_imageIDTextFieldActionPerformed

    private void removeROIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeROIActionPerformed
        this.mask = null;
        try {
            display(this.currentImageID);
        } catch (BadParametersException ex) {
            Logger.getLogger(AfficherImages.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_removeROIActionPerformed

    private void champ3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_champ3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_champ3ActionPerformed
    
    /**
     * Affiche les 3 plans de l'image
     * @param evt 
     */
    private void orthoDisplayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orthoDisplayActionPerformed
        try {
            
            IJ.run("Close All");
            //Stack d'images à afficher
            ImageStack imgStack = new ImageStack(this.patient.getImagesWidth(), this.patient.getImagesHeight(), null);
            
            ImageProcessor imgProc;
            ImagePlus imgPlus;
            
            //On parcout la liste des images pour les chargés dans le stack
            for (int i = 0; i<this.nbImages; i++) {
                String filename = this.patient.getDicomImage(i).getAbsolutePath();
                ImagePlus impTemp = IJ.openImage(filename);
                imgProc = impTemp.getProcessor();
                imgStack.addSlice(imgProc);
            }
            
            imgPlus = new ImagePlus("", imgStack);
            
            //On enregistre le stack d'images ainsi crée dans un dossier temporaire
            String tmpFile = "tmp/patient.tif";
            IJ.saveAs(imgPlus, "tif", tmpFile);
            
            //On ouvre le stack enregistré puis on l'afficher
            imgPlus = IJ.openImage(tmpFile);
            imgPlus.show();

            IJ.run(imgPlus, "Orthogonal Views", "");
            Orthogonal_Views ov = Orthogonal_Views.getInstance();
            IJ.wait(1000);
            ImagePlus imp = ov.getXZImage();

            //Coordonnées du curseur
            int[] loc = ov.getCrossLoc();
            int x = loc[0]; 
            int y = loc[1]; 
            int z = loc[2]; 
            
            
            //print(x+", "+y+", "+z);
            int width = imp.getWidth();
            int height = imp.getHeight();
            int depth = imp.getStackSize();
          
            ov.setCrossLoc(x, y, z);
             
             
             
        } catch (ImageSizeException | BadParametersException ex) {
            Logger.getLogger(AfficherImages.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_orthoDisplayActionPerformed

    private void champ4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_champ4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_champ4ActionPerformed

    private void brightnessSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_brightnessSliderStateChanged
        this.brightness = this.brightnessSlider.getValue();
        //System.out.println("Valeur de luminosité : " + this.brightness);
        try {
            display(this.currentImageID);
        } catch (BadParametersException ex) {
            Logger.getLogger(AfficherImages.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_brightnessSliderStateChanged
    
    /**
     * Affiche l'image d'id imageID dans la fenetre
     * @param imageID id de l'image à afficher
     * @throws BadParametersException
     *      Levée lorsqu'aucune image ne correspond à imageID
     */
    private void display(int imageID) throws BadParametersException {
        //System.out.println("Index image : " + imageID );
        DicomImage dcm = this.patient.getDicomImage(imageID);
        BufferedImage bufferedImage;
        
        //Si aucune ROI n'a été chargée, on affiche l'image de base
        if (this.mask == null) {
            //bufferedImage = dcm.getBufferedImage();
            
            
            
           bufferedImage = this.applyLut(dcm, this.currentLUT);
        }
        else { // Sinon on affiche l'image avec la ROI dessus
            bufferedImage = this.mask.getImageWithROI(imageID);
        }
        //On redimensionne l'image
        bufferedImage = rescale(bufferedImage, 512, 512);
        
        //On gere la luminosité
        RescaleOp rescaleOp = new RescaleOp(this.brightness, 0, null);
        
        ImageIcon ii = new ImageIcon(rescaleOp.filter(bufferedImage, null));
        //ImageIcon ii = new ImageIcon(bufferedImage);        
        
   
        imageLabel.setIcon(ii);
        
        imageIDTextField.setText(imageID + " / " + (this.nbImages-1));
        
        this.champ1.setText(dcm.getAttribute(TagFromName.StudyInstanceUID));
        this.champ2.setText(""+dcm.getTimeSlice());
        this.champ3.setText(""+dcm.getSlice());
        this.champ4.setText(dcm.getAttribute(TagFromName.AcquisitionTime));
        
    }
    
    /**
     * Redimensionne une image
     * @param source l'image à redimensionner
     * @param newWidth nouvelle largeur
     * @param newHeight nouvelle hauteur
     * @return 
     */
    private BufferedImage rescale(BufferedImage source, int newWidth, int newHeight) {
        /* On crée une nouvelle image aux bonnes dimensions. */ 
        BufferedImage buf = new BufferedImage(newWidth, newHeight, BufferedImage.TYPE_INT_RGB); 

        
        Graphics2D g = buf.createGraphics(); 
        
        int fWidth = newWidth/source.getWidth() ;
        int fHeight = newHeight/source.getHeight();
        
        //On applique une transformation affine aux pixels
        AffineTransform at = AffineTransform.getScaleInstance(fWidth, fHeight);
        g.drawRenderedImage(source, at);
        
        
        /* On retourne l'image bufferisée, qui est une image. */ 
        return buf; 
        
    }
    
    /**
     * Applique une LookUpTable à l'image DICOM
     * @param dcm image à modifier
     * @param lut LUT à appliquer
     * @return BufferedImage 
     */
    private BufferedImage applyLut(DicomImage dcm, LUT lut) {
        IJ.run("Close All");
        
        ImagePlus imp = IJ.openImage(dcm.getAbsolutePath());
        imp.setLut(lut);
       
       
        return imp.getBufferedImage();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSlider brightnessSlider;
    private javax.swing.JTextField champ1;
    private javax.swing.JTextField champ2;
    private javax.swing.JTextField champ3;
    private javax.swing.JTextField champ4;
    private javax.swing.JTextField imageIDTextField;
    private javax.swing.JLabel imageLabel;
    private javax.swing.JSlider imageSlider;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JFileChooser maskFileChooser;
    private javax.swing.JButton nextButton;
    private javax.swing.JButton orthoDisplay;
    private javax.swing.JButton prevButton;
    private javax.swing.JButton removeROI;
    private javax.swing.JButton roiChooser;
    // End of variables declaration//GEN-END:variables
}
