/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package QuantIF_Project.gui;

import QuantIF_Project.patient.DicomImage;
import QuantIF_Project.mask.Mask;
import QuantIF_Project.patient.Patient;
import QuantIF_Project.patient.exceptions.BadMaskStructException;
import QuantIF_Project.patient.exceptions.BadParametersException;
import QuantIF_Project.patient.exceptions.NotDirectoryException;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;




/**
 *
 * @author Cyriac
 */
public class AfficherImages extends javax.swing.JInternalFrame {
    
    /**
     * Patient à afficher
     */
    private Patient patient;
    
    /**
     * Nombre total d'images à afficher
     */
    private int nbImages;
    
    /**
     * ID de l'image en cours d'affichage
     */
    private int currentImageID;
    
    /**
     * Masque du ROI à appliquer aux images
     */
    private Mask mask;
    
    
    /**
     * Creates new form AfficherImages
     * @param p
     * 
     */
    public AfficherImages(Patient p) {
        initComponents();
        this.patient = p;
        this.nbImages = p.getMaxDicomImage();
        this.currentImageID = 0;
        this.mask = null;
    
        try {
            display(currentImageID);
        } catch (BadParametersException ex) {
            Logger.getLogger(AfficherImages.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //Slider Settings
        imageSlider.setMaximum(this.nbImages - 1);
        imageSlider.setMinimum(0);
        
        //imageIDTextField Settings
        imageIDTextField.setEditable(false);
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        maskFileChooser = new javax.swing.JFileChooser();
        nextButton = new javax.swing.JButton();
        prevButton = new javax.swing.JButton();
        imageSlider = new javax.swing.JSlider();
        imageIDTextField = new javax.swing.JTextField();
        imageLabel = new javax.swing.JLabel();
        roiChooser = new javax.swing.JButton();
        removeROI = new javax.swing.JButton();

        maskFileChooser.setDialogTitle("Choisir le dossier du masque");
        maskFileChooser.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Images");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        nextButton.setText("Suivant -->>");
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });
        getContentPane().add(nextButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 450, 103, 40));

        prevButton.setText("<<-- Précédent");
        prevButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevButtonActionPerformed(evt);
            }
        });
        getContentPane().add(prevButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 450, 117, 40));

        imageSlider.setValue(0);
        imageSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                imageSliderStateChanged(evt);
            }
        });
        getContentPane().add(imageSlider, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 490, 870, 50));

        imageIDTextField.setText("               ");
        imageIDTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imageIDTextFieldActionPerformed(evt);
            }
        });
        getContentPane().add(imageIDTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 410, 81, 28));

        imageLabel.setMaximumSize(new java.awt.Dimension(512, 512));
        imageLabel.setMinimumSize(new java.awt.Dimension(512, 512));
        getContentPane().add(imageLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 10, 700, 400));

        roiChooser.setText("Charger une ROI");
        roiChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roiChooserActionPerformed(evt);
            }
        });
        getContentPane().add(roiChooser, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 60, 170, 30));

        removeROI.setText("Enlever la ROI");
        removeROI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeROIActionPerformed(evt);
            }
        });
        getContentPane().add(removeROI, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 100, 170, 30));

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * Affiche la prochaine image
     * @param evt 
     */
    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
       if (this.currentImageID < this.nbImages ) {
           this.currentImageID += 1;
       }
       
        try {
            display(currentImageID);
        } catch (BadParametersException ex) {
            Logger.getLogger(AfficherImages.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_nextButtonActionPerformed

    private void prevButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prevButtonActionPerformed
        if (this.currentImageID > 1 ) {
           this.currentImageID -= 1;
       }
        try {
            display(currentImageID);
        } catch (BadParametersException ex) {
            Logger.getLogger(AfficherImages.class.getName()).log(Level.SEVERE, null, ex);
        }
                                 
    }//GEN-LAST:event_prevButtonActionPerformed

    private void imageSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_imageSliderStateChanged
        this.currentImageID = imageSlider.getValue();
        try {
            // TODO add your handling code here:
            
            display(this.currentImageID);
        } catch (BadParametersException ex) {
            Logger.getLogger(AfficherImages.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_imageSliderStateChanged

    private void roiChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roiChooserActionPerformed
                // TODO add your handling code here:
         int returnVal = maskFileChooser.showOpenDialog(this);
        
        if (JFileChooser.APPROVE_OPTION == returnVal) {
            File directory;
            directory = maskFileChooser.getSelectedFile();
           
            // Un fois le dossier choisi
            
            if (directory != null) {
                
                String maskDirPath = directory.getAbsolutePath();
                
                
                //On peut créer un nouveau mask
                
		try {
			this.mask = new Mask(this.patient, maskDirPath);
                       
                        JOptionPane.showMessageDialog(null, "Le masque du ROI a été chargé avec succès", "Info", JOptionPane.INFORMATION_MESSAGE);
                        display(this.currentImageID);
		} catch (NotDirectoryException | BadParametersException e) {
			// TODO Auto-generated catch block
              
                        JOptionPane.showMessageDialog(null, e.getMessage(), "Erreur", JOptionPane.ERROR_MESSAGE);
                        Logger.getLogger(AfficherImages.class.getName()).log(Level.SEVERE, null, e);
		} catch (BadMaskStructException ex) { 
                    JOptionPane.showMessageDialog(null, ex.getMessage(), "Erreur", JOptionPane.ERROR_MESSAGE);
                } 
		
                
            }
            else {
                JOptionPane.showMessageDialog(null, "Problème d'accès au repertoire de fichiers", "Erreur", JOptionPane.ERROR_MESSAGE);
            }
           
        } else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_roiChooserActionPerformed

    private void imageIDTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imageIDTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_imageIDTextFieldActionPerformed

    private void removeROIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeROIActionPerformed
        this.mask = null;
    }//GEN-LAST:event_removeROIActionPerformed
    
    /**
     * Affiche l'image d'id imageID dans la fenetre
     * @param imageID id de l'image à afficher
     * @throws BadParametersException
     *      Levée lorsqu'aucune image ne correspond à imageID
     */
    private void display(int imageID) throws BadParametersException {
        DicomImage dcm = this.patient.getDicomImage(imageID);
        BufferedImage bufferedImage;
        
        //Si aucune ROI n'a été chargée, on affiche l'image de base
        if (this.mask == null) {
            bufferedImage = dcm.getBufferedImage();
        }
        else { // Sinon on affiche l'image avec la ROI dessus
            bufferedImage = this.mask.getImageWithROI(imageID);
        }
        
       
        imageLabel.setIcon(new ImageIcon(scale(bufferedImage, 512, 512)));
        
        imageIDTextField.setText(imageID + " / " + (this.nbImages-1));
       
    }
    
    private Image scale(Image source, int width, int height) {
        /* On crée une nouvelle image aux bonnes dimensions. */ 
        BufferedImage buf = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB); 

        /* On dessine sur le Graphics de l'image bufferisée. */ 
        Graphics2D g = buf.createGraphics(); 
        g.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR); 
        g.drawImage(source, 0, 0, width, height, null); 
        g.dispose(); 

        /* On retourne l'image bufferisée, qui est une image. */ 
        return buf; 
        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField imageIDTextField;
    private javax.swing.JLabel imageLabel;
    private javax.swing.JSlider imageSlider;
    private javax.swing.JFileChooser maskFileChooser;
    private javax.swing.JButton nextButton;
    private javax.swing.JButton prevButton;
    private javax.swing.JButton removeROI;
    private javax.swing.JButton roiChooser;
    // End of variables declaration//GEN-END:variables
}
